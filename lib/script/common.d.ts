export namespace opcodes {
    const OP_0: number;
    const OP_PUSHDATA1: number;
    const OP_PUSHDATA2: number;
    const OP_PUSHDATA4: number;
    const OP_1NEGATE: number;
    const OP_RESERVED: number;
    const OP_1: number;
    const OP_2: number;
    const OP_3: number;
    const OP_4: number;
    const OP_5: number;
    const OP_6: number;
    const OP_7: number;
    const OP_8: number;
    const OP_9: number;
    const OP_10: number;
    const OP_11: number;
    const OP_12: number;
    const OP_13: number;
    const OP_14: number;
    const OP_15: number;
    const OP_16: number;
    const OP_NOP: number;
    const OP_VER: number;
    const OP_IF: number;
    const OP_NOTIF: number;
    const OP_VERIF: number;
    const OP_VERNOTIF: number;
    const OP_ELSE: number;
    const OP_ENDIF: number;
    const OP_VERIFY: number;
    const OP_RETURN: number;
    const OP_TOALTSTACK: number;
    const OP_FROMALTSTACK: number;
    const OP_2DROP: number;
    const OP_2DUP: number;
    const OP_3DUP: number;
    const OP_2OVER: number;
    const OP_2ROT: number;
    const OP_2SWAP: number;
    const OP_IFDUP: number;
    const OP_DEPTH: number;
    const OP_DROP: number;
    const OP_DUP: number;
    const OP_NIP: number;
    const OP_OVER: number;
    const OP_PICK: number;
    const OP_ROLL: number;
    const OP_ROT: number;
    const OP_SWAP: number;
    const OP_TUCK: number;
    const OP_CAT: number;
    const OP_SUBSTR: number;
    const OP_LEFT: number;
    const OP_RIGHT: number;
    const OP_SIZE: number;
    const OP_INVERT: number;
    const OP_AND: number;
    const OP_OR: number;
    const OP_XOR: number;
    const OP_EQUAL: number;
    const OP_EQUALVERIFY: number;
    const OP_RESERVED1: number;
    const OP_RESERVED2: number;
    const OP_1ADD: number;
    const OP_1SUB: number;
    const OP_2MUL: number;
    const OP_2DIV: number;
    const OP_NEGATE: number;
    const OP_ABS: number;
    const OP_NOT: number;
    const OP_0NOTEQUAL: number;
    const OP_ADD: number;
    const OP_SUB: number;
    const OP_MUL: number;
    const OP_DIV: number;
    const OP_MOD: number;
    const OP_LSHIFT: number;
    const OP_RSHIFT: number;
    const OP_BOOLAND: number;
    const OP_BOOLOR: number;
    const OP_NUMEQUAL: number;
    const OP_NUMEQUALVERIFY: number;
    const OP_NUMNOTEQUAL: number;
    const OP_LESSTHAN: number;
    const OP_GREATERTHAN: number;
    const OP_LESSTHANOREQUAL: number;
    const OP_GREATERTHANOREQUAL: number;
    const OP_MIN: number;
    const OP_MAX: number;
    const OP_WITHIN: number;
    const OP_RIPEMD160: number;
    const OP_SHA1: number;
    const OP_SHA256: number;
    const OP_HASH160: number;
    const OP_HASH256: number;
    const OP_CODESEPARATOR: number;
    const OP_CHECKSIG: number;
    const OP_CHECKSIGVERIFY: number;
    const OP_CHECKMULTISIG: number;
    const OP_CHECKMULTISIGVERIFY: number;
    const OP_NOP1: number;
    const OP_CHECKLOCKTIMEVERIFY: number;
    const OP_CHECKSEQUENCEVERIFY: number;
    const OP_NOP4: number;
    const OP_NOP5: number;
    const OP_NOP6: number;
    const OP_NOP7: number;
    const OP_NOP8: number;
    const OP_NOP9: number;
    const OP_NOP10: number;
    const OP_BLAKE160: number;
    const OP_BLAKE256: number;
    const OP_SHA3: number;
    const OP_KECCAK: number;
    const OP_TYPE: number;
    const OP_INVALIDOPCODE: number;
}
export const opcodesByVal: {
    0: string;
    76: string;
    77: string;
    78: string;
    79: string;
    80: string;
    81: string;
    82: string;
    83: string;
    84: string;
    85: string;
    86: string;
    87: string;
    88: string;
    89: string;
    90: string;
    91: string;
    92: string;
    93: string;
    94: string;
    95: string;
    96: string;
    97: string;
    98: string;
    99: string;
    100: string;
    101: string;
    102: string;
    103: string;
    104: string;
    105: string;
    106: string;
    107: string;
    108: string;
    109: string;
    110: string;
    111: string;
    112: string;
    113: string;
    114: string;
    115: string;
    116: string;
    117: string;
    118: string;
    119: string;
    120: string;
    121: string;
    122: string;
    123: string;
    124: string;
    125: string;
    126: string;
    127: string;
    128: string;
    129: string;
    130: string;
    131: string;
    132: string;
    133: string;
    134: string;
    135: string;
    136: string;
    137: string;
    138: string;
    139: string;
    140: string;
    141: string;
    142: string;
    143: string;
    144: string;
    145: string;
    146: string;
    147: string;
    148: string;
    149: string;
    150: string;
    151: string;
    152: string;
    153: string;
    154: string;
    155: string;
    156: string;
    157: string;
    158: string;
    159: string;
    160: string;
    161: string;
    162: string;
    163: string;
    164: string;
    165: string;
    166: string;
    167: string;
    168: string;
    169: string;
    170: string;
    171: string;
    172: string;
    173: string;
    174: string;
    175: string;
    176: string;
    177: string;
    178: string;
    179: string;
    180: string;
    181: string;
    182: string;
    183: string;
    184: string;
    185: string;
    192: string;
    193: string;
    194: string;
    195: string;
    208: string;
    255: string;
};
export const small: Buffer[];
/**
 * Script and locktime flags. See {@link VerifyFlags }.
 */
export type flags = number;
export namespace flags {
    const MANDATORY_VERIFY_FLAGS: number;
    const STANDARD_VERIFY_FLAGS: number;
    const ONLY_STANDARD_VERIFY_FLAGS: number;
}
export namespace hashType {
    const ALL: number;
    const NONE: number;
    const SINGLE: number;
    const SINGLEREVERSE: number;
    const NOINPUT: number;
    const ANYONECANPAY: number;
}
/**
 * *
 */
export type hashType = SighashType;
export const hashTypeByVal: {
    1: string;
    2: string;
    3: string;
    4: string;
    64: string;
    128: string;
};
export namespace types {
    const NONSTANDARD: number;
    const PUBKEY: number;
    const PUBKEYHASH: number;
    const MULTISIG: number;
}
/**
 * Output script types.
 */
export type types = number;
export const typesByVal: {
    0: string;
    1: string;
    2: string;
    3: string;
};
export function isKeyEncoding(key: Buffer): boolean;
export function isSignatureEncoding(sig: Buffer): boolean;
export function toASM(item: Buffer, decode: boolean | null): string;
