export = NameState;
/**
 * NameState
 * @extends {bio.Struct}
 */
declare class NameState {
    name: Buffer;
    nameHash: Buffer;
    height: number;
    renewal: number;
    owner: Outpoint;
    value: number;
    highest: number;
    data: Buffer;
    transfer: number;
    revoked: number;
    claimed: number;
    renewals: number;
    registered: boolean;
    expired: boolean;
    weak: boolean;
    _delta: any;
    set delta(arg: any);
    get delta(): any;
    inject(ns: any): NameState;
    clear(): NameState;
    isNull(): boolean;
    hasDelta(): boolean;
    state(height: any, network: any): number;
    isOpening(height: any, network: any): boolean;
    isLocked(height: any, network: any): boolean;
    isBidding(height: any, network: any): boolean;
    isReveal(height: any, network: any): boolean;
    isClosed(height: any, network: any): boolean;
    isRevoked(height: any, network: any): boolean;
    isRedeemable(height: any, network: any): boolean;
    isClaimable(height: any, network: any): boolean;
    isExpired(height: any, network: any): boolean;
    maybeExpire(height: any, network: any): boolean;
    reset(height: any): NameState;
    set(name: any, height: any): NameState;
    setHeight(height: any): NameState;
    setRenewal(renewal: any): NameState;
    setOwner(owner: any): NameState;
    setValue(value: any): NameState;
    setHighest(highest: any): NameState;
    setData(data: any): NameState;
    setTransfer(transfer: any): NameState;
    setRevoked(revoked: any): NameState;
    setClaimed(claimed: any): NameState;
    setRenewals(renewals: any): NameState;
    setRegistered(registered: any): NameState;
    setExpired(expired: any): NameState;
    setWeak(weak: any): NameState;
    applyState(delta: any): NameState;
    getSize(): number;
    getField(): number;
    write(bw: any): any;
    read(br: any): NameState;
    getJSON(height: any, network: any): {
        name: string;
        nameHash: string;
        state: string;
        height: number;
        renewal: number;
        owner: any;
        value: number;
        highest: number;
        data: string;
        transfer: number;
        revoked: number;
        claimed: number;
        renewals: number;
        registered: boolean;
        expired: boolean;
        weak: boolean;
        stats: {
            openPeriodStart: number;
            openPeriodEnd: any;
            blocksUntilBidding: number;
            hoursUntilBidding: number;
            lockupPeriodStart: number;
            lockupPeriodEnd: any;
            blocksUntilClosed: number;
            hoursUntilClosed: number;
            bidPeriodStart: any;
            bidPeriodEnd: any;
            blocksUntilReveal: number;
            hoursUntilReveal: number;
            revealPeriodStart: any;
            revealPeriodEnd: any;
            blocksUntilClose: number;
            hoursUntilClose: number;
            renewalPeriodStart: number;
            renewalPeriodEnd: any;
            blocksUntilExpire: number;
            daysUntilExpire: number;
            revokePeriodStart: number;
            revokePeriodEnd: any;
            blocksUntilReopen: number;
            hoursUntilReopen: number;
            transferLockupStart: number;
            transferLockupEnd: any;
            blocksUntilValidFinalize: number;
            hoursUntilValidFinalize: number;
        };
    };
    fromJSON(json: any): NameState;
    toStats(height: any, network: any): {
        openPeriodStart: number;
        openPeriodEnd: any;
        blocksUntilBidding: number;
        hoursUntilBidding: number;
        lockupPeriodStart: number;
        lockupPeriodEnd: any;
        blocksUntilClosed: number;
        hoursUntilClosed: number;
        bidPeriodStart: any;
        bidPeriodEnd: any;
        blocksUntilReveal: number;
        hoursUntilReveal: number;
        revealPeriodStart: any;
        revealPeriodEnd: any;
        blocksUntilClose: number;
        hoursUntilClose: number;
        renewalPeriodStart: number;
        renewalPeriodEnd: any;
        blocksUntilExpire: number;
        daysUntilExpire: number;
        revokePeriodStart: number;
        revokePeriodEnd: any;
        blocksUntilReopen: number;
        hoursUntilReopen: number;
        transferLockupStart: number;
        transferLockupEnd: any;
        blocksUntilValidFinalize: number;
        hoursUntilValidFinalize: number;
    };
    format(height: any, network: any): {
        name: string;
        nameHash: string;
        state: string;
        height: number;
        renewal: number;
        owner: any;
        value: number;
        highest: number;
        data: string;
        transfer: number;
        revoked: number;
        claimed: number;
        renewals: number;
        registered: boolean;
        expired: boolean;
        weak: boolean;
        stats: {
            openPeriodStart: number;
            openPeriodEnd: any;
            blocksUntilBidding: number;
            hoursUntilBidding: number;
            lockupPeriodStart: number;
            lockupPeriodEnd: any;
            blocksUntilClosed: number;
            hoursUntilClosed: number;
            bidPeriodStart: any;
            bidPeriodEnd: any;
            blocksUntilReveal: number;
            hoursUntilReveal: number;
            revealPeriodStart: any;
            revealPeriodEnd: any;
            blocksUntilClose: number;
            hoursUntilClose: number;
            renewalPeriodStart: number;
            renewalPeriodEnd: any;
            blocksUntilExpire: number;
            daysUntilExpire: number;
            revokePeriodStart: number;
            revokePeriodEnd: any;
            blocksUntilReopen: number;
            hoursUntilReopen: number;
            transferLockupStart: number;
            transferLockupEnd: any;
            blocksUntilValidFinalize: number;
            hoursUntilValidFinalize: number;
        };
    };
}
declare namespace NameState {
    export { states };
    export { statesByVal };
    export const MAX_SIZE: number;
}
import Outpoint = require("../primitives/outpoint");
declare namespace states {
    const OPENING: number;
    const LOCKED: number;
    const BIDDING: number;
    const REVEAL: number;
    const CLOSED: number;
    const REVOKED: number;
}
declare const statesByVal: {
    [x: number]: string;
};
